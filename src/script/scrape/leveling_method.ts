import axios from 'axios';
import fs from 'fs/promises';
import path from 'path';

// Types pour les m√©thodes de leveling TFT
interface LevelingStep {
  [level: string]: string[]; // ex: "lvl4": ["Lvl 4 by 2-1", "Save Gold"]
}

interface LevelingMethod {
  name: string;
  description: string;
  leveling: LevelingStep;
}

interface TFTLevelingData {
  [methodKey: string]: LevelingMethod; // ex: "standard": {...}, "slowroll@5": {...}
}

interface ScrapingResult {
  success: boolean;
  data?: TFTLevelingData;
  error?: string;
  timestamp: string;
  methodsCount?: number;
}

class TFTLevelingScraper {
  private baseUrl = 'https://utils.iesdev.com/static/json/tft/levelingMethods';
  private outputDir = './data/tft/leveling';

  constructor() {
    this.ensureOutputDirectory();
  }

  /**
   * Assure que le r√©pertoire de sortie existe
   */
  private async ensureOutputDirectory(): Promise<void> {
    try {
      await fs.mkdir(this.outputDir, { recursive: true });
    } catch (error) {
      console.error('Erreur lors de la cr√©ation du r√©pertoire:', error);
    }
  }

  /**
   * Nettoie le HTML des descriptions et instructions
   */
  private cleanHtmlText(text: string): string {
    return text
      .replace(/<b>/g, '**')
      .replace(/<\/b>/g, '**')
      .replace(/<span>/g, '')
      .replace(/<\/span>/g, '')
      .replace(/&nbsp;/g, ' ')
      .trim();
  }

  /**
   * R√©cup√®re les donn√©es depuis l'API TFT Leveling Methods
   */
  async fetchLevelingData(): Promise<ScrapingResult> {
    const timestamp = new Date().toISOString();
    
    try {
      console.log('üîÑ R√©cup√©ration des m√©thodes de leveling TFT...');
      
      const response = await axios.get<TFTLevelingData>(this.baseUrl, {
        timeout: 10000,
        headers: {
          'User-Agent': 'TFT-Leveling-Scraper/1.0',
          'Accept': 'application/json',
        }
      });

      if (response.status !== 200) {
        throw new Error(`Statut HTTP non valide: ${response.status}`);
      }

      const data = response.data;
      const methodsCount = Object.keys(data).length;
      
      console.log('‚úÖ Donn√©es de leveling r√©cup√©r√©es avec succ√®s');
      console.log(`üìä Nombre de m√©thodes: ${methodsCount}`);
      console.log(`üéØ M√©thodes disponibles: ${Object.keys(data).join(', ')}`);

      return {
        success: true,
        data,
        timestamp,
        methodsCount
      };

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';
      console.error('‚ùå Erreur lors de la r√©cup√©ration:', errorMessage);
      
      return {
        success: false,
        error: errorMessage,
        timestamp
      };
    }
  }

  /**
   * Sauvegarde les donn√©es dans un fichier JSON
   */
  async saveData(data: TFTLevelingData, filename?: string): Promise<void> {
    try {
      const fileName = filename || `leveling_method_notclean.json`;
      const filePath = path.join(this.outputDir, fileName);
      
      await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');
      console.log(`üíæ Donn√©es sauvegard√©es: ${filePath}`);
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde:', error);
    }
  }

  /**
   * Sauvegarde une version nettoy√©e (sans HTML) des donn√©es
   */
  async saveCleanedData(data: TFTLevelingData): Promise<void> {
    try {
      const cleanedData: TFTLevelingData = {};
      
      for (const [methodKey, method] of Object.entries(data)) {
        cleanedData[methodKey] = {
          name: this.cleanHtmlText(method.name),
          description: this.cleanHtmlText(method.description),
          leveling: {}
        };

        for (const [levelKey, steps] of Object.entries(method.leveling)) {
          cleanedData[methodKey].leveling[levelKey] = steps.map(step => this.cleanHtmlText(step));
        }
      }

      const fileName = `leveling_method.json`;
      const filePath = path.join(this.outputDir, fileName);
      
      await fs.writeFile(filePath, JSON.stringify(cleanedData, null, 2), 'utf-8');
      console.log(`üßπ Version nettoy√©e sauvegard√©e: ${filePath}`);
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde nettoy√©e:', error);
    }
  }

  /**
   * Sauvegarde un log des r√©sultats de scraping
   */
  async saveScrapingLog(result: ScrapingResult): Promise<void> {
    try {
      const logPath = path.join(this.outputDir, 'log_leveling_method.json');
      let logs: ScrapingResult[] = [];

      // Charge les logs existants
      try {
        const existingLogs = await fs.readFile(logPath, 'utf-8');
        logs = JSON.parse(existingLogs);
      } catch {
        // Fichier n'existe pas encore
      }

      // Ajoute le nouveau r√©sultat
      logs.push(result);

      // Garde seulement les 50 derniers logs
      if (logs.length > 50) {
        logs = logs.slice(-50);
      }

      await fs.writeFile(logPath, JSON.stringify(logs, null, 2), 'utf-8');
      console.log(`üìù Log de scraping mis √† jour`);
    } catch (error) {
      console.error('‚ùå Erreur lors de la sauvegarde du log:', error);
    }
  }

  /**
   * V√©rifie si les donn√©es ont √©t√© mises √† jour depuis la derni√®re fois
   */
  async checkForUpdates(): Promise<boolean> {
    try {
      const logPath = path.join(this.outputDir, 'log_leveling_method.json');
      const logs = JSON.parse(await fs.readFile(logPath, 'utf-8')) as ScrapingResult[];
      
      if (logs.length === 0) return true;

      const lastSuccessfulScrape = logs.reverse().find(log => log.success);
      if (!lastSuccessfulScrape?.data) return true;

      const currentData = await this.fetchLevelingData();
      if (!currentData.success || !currentData.data) return false;

      // Compare le nombre de m√©thodes et le contenu
      const hasCountChange = lastSuccessfulScrape.methodsCount !== currentData.methodsCount;
      const hasContentChange = JSON.stringify(lastSuccessfulScrape.data) !== JSON.stringify(currentData.data);

      return hasCountChange || hasContentChange;
    } catch {
      return true; // En cas d'erreur, on consid√®re qu'il y a une mise √† jour
    }
  }

  /**
   * Analyse les donn√©es r√©cup√©r√©es
   */
  analyzeData(data: TFTLevelingData): void {
    console.log('\nüìà Analyse des m√©thodes de leveling:');
    console.log(`‚îú‚îÄ Nombre total de m√©thodes: ${Object.keys(data).length}`);
    
    for (const [methodKey, method] of Object.entries(data)) {
      console.log(`‚îú‚îÄ ${methodKey}:`);
      console.log(`‚îÇ  ‚îú‚îÄ Nom: ${this.cleanHtmlText(method.name)}`);
      console.log(`‚îÇ  ‚îú‚îÄ Description: ${this.cleanHtmlText(method.description).substring(0, 50)}...`);
      console.log(`‚îÇ  ‚îî‚îÄ √âtapes de leveling: ${Object.keys(method.leveling).length}`);
    }
    
    console.log('‚îî‚îÄ Analyse termin√©e');
  }

  /**
   * G√©n√®re un rapport d√©taill√© des m√©thodes
   */
  async generateReport(data: TFTLevelingData): Promise<void> {
    try {
      let report = '# TFT Leveling Methods Report\n\n';
      report += `G√©n√©r√© le: ${new Date().toLocaleString()}\n`;
      report += `Nombre de m√©thodes: ${Object.keys(data).length}\n\n`;

      for (const [methodKey, method] of Object.entries(data)) {
        report += `## ${this.cleanHtmlText(method.name)} (${methodKey})\n\n`;
        report += `**Description:** ${this.cleanHtmlText(method.description)}\n\n`;
        report += `**√âtapes de leveling:**\n`;
        
        for (const [levelKey, steps] of Object.entries(method.leveling)) {
          report += `- **${levelKey}:** ${steps.map(s => this.cleanHtmlText(s)).join(' - ')}\n`;
        }
        
        report += '\n---\n\n';
      }

      const reportPath = path.join(this.outputDir, `leveling_report_${Date.now()}.md`);
      await fs.writeFile(reportPath, report, 'utf-8');
      console.log(`üìÑ Rapport g√©n√©r√©: ${reportPath}`);
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration du rapport:', error);
    }
  }

  /**
   * Fonction principale de scraping
   */
  async scrape(options: { 
    saveData?: boolean, 
    checkUpdates?: boolean,
    generateReport?: boolean,
    saveCleanedVersion?: boolean 
  } = {}): Promise<ScrapingResult> {
    const { 
      saveData = true, 
      checkUpdates = false,
      generateReport = false,
      saveCleanedVersion = true 
    } = options;

    console.log('üöÄ D√©marrage du scraping TFT Leveling Methods...\n');

    // V√©rifie les mises √† jour si demand√©
    if (checkUpdates) {
      const hasUpdates = await this.checkForUpdates();
      if (!hasUpdates) {
        console.log('‚ÑπÔ∏è Aucune mise √† jour d√©tect√©e, scraping ignor√©');
        return {
          success: true,
          timestamp: new Date().toISOString()
        };
      }
      console.log('üÜï Mise √† jour d√©tect√©e, poursuite du scraping...\n');
    }

    // R√©cup√®re les donn√©es
    const result = await this.fetchLevelingData();

    if (result.success && result.data) {
      // Analyse les donn√©es
      this.analyzeData(result.data);

      // Sauvegarde si demand√©
      if (saveData) {
        await this.saveData(result.data);
      }

      // Sauvegarde la version nettoy√©e
      if (saveCleanedVersion) {
        await this.saveCleanedData(result.data);
      }

      // G√©n√®re un rapport
      if (generateReport) {
        await this.generateReport(result.data);
      }
    }

    // Sauvegarde le log
    await this.saveScrapingLog(result);

    console.log('\n‚ú® Scraping termin√©');
    return result;
  }
}

// Fonction utilitaire pour lancer le scraping
async function runLevelingScraper() {
  const scraper = new TFTLevelingScraper();
  
  // Arguments de ligne de commande
  const args = process.argv.slice(2);
  const saveData = !args.includes('--no-save');
  const checkUpdates = args.includes('--check-updates');
  const continuous = args.includes('--continuous');
  const generateReport = args.includes('--report');
  const saveCleanedVersion = !args.includes('--no-clean');

  if (continuous) {
    console.log('üîÑ Mode continu activ√© (v√©rification toutes les 10 minutes)');
    
    // Scraping initial
    await scraper.scrape({ 
      saveData, 
      checkUpdates: true, 
      generateReport,
      saveCleanedVersion 
    });
    
    // Scraping p√©riodique
    setInterval(async () => {
      console.log('\n‚è∞ V√©rification programm√©e...');
      await scraper.scrape({ 
        saveData, 
        checkUpdates: true, 
        generateReport: false, // Pas de rapport √† chaque fois
        saveCleanedVersion 
      });
    }, 10 * 60 * 1000); // 10 minutes
    
  } else {
    // Scraping unique
    await scraper.scrape({ 
      saveData, 
      checkUpdates, 
      generateReport,
      saveCleanedVersion 
    });
  }
}

// Export pour utilisation en module
export { TFTLevelingScraper, type TFTLevelingData, type LevelingMethod, type ScrapingResult };

// Ex√©cution directe du script
if (import.meta.url === `file://${process.argv[1]}`) {
  runLevelingScraper().catch(console.error);
}